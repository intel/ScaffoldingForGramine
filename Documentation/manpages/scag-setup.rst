.. program:: scag-setup
.. _scag-setup:

*********************************************************************
:program:`scag-setup` -- Build Gramine Scaffolding application
*********************************************************************

Synopsis
========

| :command:`scag setup` [*OPTIONS*]
| :command:`scag-setup` [*OPTIONS*]

Description
===========

This command is used to configure the Scaffolding project.
As an output, the configuration file is generated.
The file contains all necessary information required to build the project.
Each framework can define additional specific for it options.

Options
=======

.. option:: --bootstrap

    Initialize an empty directory with an example application from
    the given framework.

.. option:: --framework <framework>

    The framework used by the scaffolded application.
    Currently, we support following frameworks:

    - Plain Python
    - Flask
    - Node.js
    - Express.js
    - Koa.js
    - Java JAR files
    - Java with Gradle build system
    - .NET

.. option:: --project_dir <dir>

    The directory of the application to scaffold.

Python Options
==============

.. option:: --application

    Python application main script.

Node.js Options
===============

.. option:: --application

    Node.js application main script.

Express.js
==========

.. option:: --application

    Express.js application main script.

.. option:: --expressjs_internal_port

    Port used by Express.js application.

Koa.js
======

.. option:: --application

    Koa.js application main script.

.. option:: --koajs_internal_port

    Port used by Koa.js application.

Java JAR files Options
======================

.. option:: --application

    Java JAR application.

Java Gradle build system
========================

.. option:: --application

    Specify the JAR file to be executed. This file should be one of the JARs
    generated by the Gradle build, typically located in the `build/libs/`
    directory.

.NET Options
==============

.. option:: --build_config

    Build configuration (Debug/Release)

.. option:: --project_file

    Application's main project file

Files
=====

Example of the generated file:

.. code-block:: toml

    [application]
    framework = "python_plain"
    sgx = true

    [python_plain]
    application = "hello_world.py"
